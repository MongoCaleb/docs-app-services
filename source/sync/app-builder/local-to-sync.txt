.. _realm-sync-local-to-sync:

==============================================
Migrate a Local-Only App to a Sync-Enabled App
==============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

If you have a mobile app that uses a local realm and you want to 
convert the app to use Sync, there are two main tasks: create and configure 
an :ref:`App Services App <deploy>`, and then modify your client code to point 
to this new backend app.

.. note::

   When it comes to reading and writing to a realm database, there is no difference 
   between working with a local realm and a synced realm. 
   Once you configure sync and open the realm, your existing 
   code continues to work in the same way it did before migrating.

Create an App Services App
--------------------------

To sync your data between devices and MongoDB Atlas, you first create
an App Services App. This app provides a gateway to the data with security
in the form of user authentication, data encryption, and access control.

To get started creating the backend app, follow the steps in
:ref:`<create-app>`.

Enable Authentication
~~~~~~~~~~~~~~~~~~~~~

Atlas Device Sync requires authenticated users. Atlas App Services provides
many different :ref:`Authentication Providers <authentication-providers>` such
as email/password and OAuth. Once you have enabled and configured authentication,
you have full control over who has access to which data.

To learn more and get started, see 
:ref:`Authentication Providers <authentication-providers>`.

Enable Sync
~~~~~~~~~~~

In your App Services App, configuring sync is the final step. When you set up 
sync, you enable authenticated users to have online access to their most-recent  
data available while also ensuring it is available to them when their devices 
are offline. 

With Flexible Sync, clients synchronize subsets of data based on queries to
queryable fields. When configuring Flexible Sync, you decide which fields
clients can query on. To enable Flexible Sync, follow the steps in
:ref:`<enable-flexible-sync>`.

Update the Client App
---------------------

Now that you have the backend set up for Device Sync, you need to make a few 
changes to your client app code. Follow the steps to set up Flexible Sync in the 
Quick Start for the language/platform you are using:

- :ref:`<java-client-quick-start-sync>`
- :ref:`<ios-client-quick-start-with-sync>`
- :ref:`<dotnet-client-quick-start>`
- :ref:`<react-native-client-quick-start>`
- :ref:`<node-client-quick-start>`

.. _copy-local-data-to-synced-realm:

Copy Existing Data
------------------
At this point, your data still only exists in the local database. You need to 
perform an initial copy before Realm will sync the data. Most of the SDKs provide 
an easy process for step. For details, see:

- :ref:`Open Non-Synced Realm as a Synced Realm - Swift SDK <ios-open-non-synced-as-synced-realm>`
- :ref:`Convert Between Non-Synced Realms and Synced Realms - .NET SDK<dotnet-convert-to-sync>`
- :ref:`Open Existing Realm with Different Configuration - Node.js SDK <node-open-existing-realm-different-configuration>`
- :ref:`Open Existing Realm with Different Configuration - React Native SDK <react-native-open-existing-realm-different-configuration>`

For SDKs that do not provide an API for copying the data, follow these steps:

.. figure:: /images/local_to_sync.png
   :alt: Flow chart showing the steps to convert from local to sync

#. Check if a synced realm already exists.

#. If not, create one. Open a connection to it and to the local realm.

#. Read each record from the local realm and modify it to match the schema of the
   synced realm.

#. Copy the modified record to the new synced realm. Sync automatically
   copies the record to MongoDB Atlas when connected to your App.

#. Confirm that all records you want to preserve are in the new realm.

#. Delete the local realm file.

#. On each subsequent app load, check if the local realm has been
   deleted.
