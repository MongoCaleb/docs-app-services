=========================
Using BSON and EJSON Data
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Endpoint requests can specify BSON types that don't exist in JSON by
instead using the EJSON :ref:`data format <data-api-data-formats>` in
the request body. You can use EJSON to match BSON types in query filters
or write BSON types in insert and update operations.

To specify that a request body uses EJSON, set the ``Content-Type`` header:

.. code-block:: none
   
   Content-Type: application/ejson

.. note::

   For detailed examples of all available endpoints, see the 
   :ref:`Generated Endpoints OpenAPI Reference <data-api-v1>`.

Binary
------

To specify a binary value, use ``$binary`` with the value encoded in
Base64 and a `BSON subtype <https://bsonspec.org/spec.html>`_ encoded as
a two-character hexadecimal string:

.. literalinclude:: /data-api/snippets/data-types.snippet.Binary.sh
   :language: bash
   :emphasize-lines: 11-16

Date
----

To specify a date, use a ``$date`` object. The value depends on which
EJSON format you want to use.

Canonical EJSON
~~~~~~~~~~~~~~~

The value is a `UNIX timestamp in milliseconds
<https://currentmillis.com/>`_ as a 64-bit integer:

.. literalinclude:: /data-api/snippets/data-types.snippet.Date-Canonical.sh
   :language: bash
   :emphasize-lines: 11

Relaxed EJSON
~~~~~~~~~~~~~

The value is an :wikipedia:`ISO 8601 <ISO_8601>` date string with a time
component:

.. literalinclude:: /data-api/snippets/data-types.snippet.Date-Relaxed.sh
   :language: bash
   :emphasize-lines: 11

Decimal128
----------

To specify a 128-bit decimal, use ``$numberDecimal`` with the decimal
value as a string:

.. literalinclude:: /data-api/snippets/data-types.snippet.Decimal128.sh
   :language: bash
   :emphasize-lines: 11

Double
------

Canonical EJSON
~~~~~~~~~~~~~~~
To specify a 64-bit signed floating point value (commonly referred to as
a "double"), use a canonical ``$numberDouble`` with the integer value as
a string:

.. literalinclude:: /data-api/snippets/data-types.snippet.Double-Canonical.sh
   :language: bash
   :emphasize-lines: 11

Relaxed EJSON
~~~~~~~~~~~~~

An EJSON value that contains a raw JSON ``number`` with a decimal point
is automatically cast to a ``$numberDouble`` object:

.. literalinclude:: /data-api/snippets/data-types.snippet.Double-Relaxed.sh
   :language: bash
   :emphasize-lines: 11

Int32
-----

To specify a 32-bit signed integer value, use a canonical ``$numberInt``
object with the integer value as a string:

.. literalinclude:: /data-api/snippets/data-types.snippet.Int32-Canonical.sh
   :language: bash
   :emphasize-lines: 11

Relaxed EJSON
~~~~~~~~~~~~~

An EJSON value that contains a raw JSON ``number`` without a decimal
point is automatically cast to a ``$numberInt`` object:

.. literalinclude:: /data-api/snippets/data-types.snippet.Int32-Relaxed.sh
   :language: bash
   :emphasize-lines: 11

Int64
-----

To specify a 64-bit signed integer value, use ``$numberLong`` with the
integer value as a string:

.. literalinclude:: /data-api/snippets/data-types.snippet.Int64.sh
   :language: bash
   :emphasize-lines: 11

ObjectId
--------

To specify an ObjectId value, use ``$oid`` with the ID as a byte string:

.. literalinclude:: /data-api/snippets/data-types.snippet.ObjectId.sh
   :language: bash
   :emphasize-lines: 11

