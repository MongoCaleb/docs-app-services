.. _data-api-data-formats:

=========================
Using BSON and EJSON Data
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

MongoDB stores data in a format called `BSON <https://bsonspec.org/>`__,
which is similar to a JSON object in structure but supports additional data types 
and uses a binary encoding. BSON is efficient for computers but is not human 
readable, so you can't work with it directly.

Rather than using BSON, the generated endpoints use two formats to represent data 
in requests and responses: JSON and EJSON. For BSON types that don't exist in JSON, 
use the EJSON :ref:`data format <data-api-data-formats>` in the request body.

You define a single default return type for all generated endpoints and 
individually for each custom endpoint. For example, to specify that a request 
body uses EJSON, set the ``Accept`` and ``Content-Type`` headers to 
``application/ejson``:

.. code-block:: none
   
   Accept: application/ejson
   Content-Type: application/ejson

.. _data-format-json:

Standard JSON (application/json)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The **JSON** format uses standard types that any tool can parse 
and understand. However, JSON cannot represent all BSON types so JSON
responses may lose type information for some fields. For example, BSON
has distinct types for 32-bit integers and 64-bit floats but a JSON
response represents both as a ``number``.

.. _data-format-ejson:

Canonical & Relaxed EJSON (application/ejson)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :manual:`MongoDB Extended JSON format </reference/mongodb-extended-json/>` 
is a superset of standard JSON that uses structured fields to represent BSON data 
that don't have corresponding JSON types. This fully represents your data but 
requires your client to understand how to work with EJSON.

There are two variants of EJSON:

- **Canonical EJSON** uses a verbose structure that emphasizes type
  preservation at the expense of readability and interoperability. It
  fully represents BSON types but you may need to use a library or
  custom code to work with it.

- **Relaxed EJSON** uses a more compact structure that is easier to read
  and work with but may lose type information for some BSON types. For
  example, a number field in an inserted document may be inferred as a
  different numeric BSON type than you expect.

You can use either Canonical or Relaxed EJSON in request bodies. Data
API endpoints that are configured to return EJSON always return
Canonical EJSON.

Expressing Data Types in JSON and EJSON
---------------------------------------

Binary
~~~~~~

To specify a binary value in EJSON, use ``$binary`` with the value encoded in
Base64 and a `BSON subtype <https://bsonspec.org/spec.html>`_ encoded as
a two-character hexadecimal string:

.. tabs::

       .. tab:: Canonical EJSON
          :tabid: can_ejson

          .. code-block:: json

             {
               "$binary": {
                  "base64": "e67803a39588be8a95731a21e27d7391",
                  "subType": "05"
               }
             } 

       .. tab:: Relaxed EJSON
          :tabid: rel_ejson

          .. code-block:: json

             {
               "$binary": {
                  "base64": "e67803a39588be8a95731a21e27d7391",
                  "subType": "05"
               }
             }

       .. tab:: JSON
          :tabid: json

          .. code-block:: json

             {
               "Subtype": 5,
               "Data": "e67803a39588be8a95731a21e27d7391"
             }


Date
~~~~

To specify a date, use a ``$date`` object.

.. tabs::

       .. tab:: Canonical EJSON
          :tabid: can_ejson

          .. code-block:: json

             {
               "$date": {
                  "$numberLong": "1641954803067"
               }
             } 

       .. tab:: Relaxed EJSON
          :tabid: rel_ejson

          .. code-block:: json

             {
               "$date": "2022-01-12T02:33:23.067Z"
             }
      
       .. tab:: JSON
          :tabid: json

          .. code-block:: json

             {
               "2022-01-12T02:33:23.067Z"
             }




Decimal128
----------

To specify a 128-bit decimal, use ``$numberDecimal`` with the decimal
value as a string:

.. literalinclude:: /data-api/snippets/data-types.snippet.Decimal128.sh
   :language: bash
   :emphasize-lines: 11

Double
------

Canonical EJSON
~~~~~~~~~~~~~~~
To specify a 64-bit signed floating point value (commonly referred to as
a "double"), use a canonical ``$numberDouble`` with the integer value as
a string:

.. literalinclude:: /data-api/snippets/data-types.snippet.Double-Canonical.sh
   :language: bash
   :emphasize-lines: 11

Relaxed EJSON
~~~~~~~~~~~~~

An EJSON value that contains a raw JSON ``number`` with a decimal point
is automatically cast to a ``$numberDouble`` object:

.. literalinclude:: /data-api/snippets/data-types.snippet.Double-Relaxed.sh
   :language: bash
   :emphasize-lines: 11

Int32
-----

To specify a 32-bit signed integer value, use a canonical ``$numberInt``
object with the integer value as a string:

.. literalinclude:: /data-api/snippets/data-types.snippet.Int32-Canonical.sh
   :language: bash
   :emphasize-lines: 11

Relaxed EJSON
~~~~~~~~~~~~~

An EJSON value that contains a raw JSON ``number`` without a decimal
point is automatically cast to a ``$numberInt`` object:

.. literalinclude:: /data-api/snippets/data-types.snippet.Int32-Relaxed.sh
   :language: bash
   :emphasize-lines: 11

Int64
-----

To specify a 64-bit signed integer value, use ``$numberLong`` with the
integer value as a string:

.. literalinclude:: /data-api/snippets/data-types.snippet.Int64.sh
   :language: bash
   :emphasize-lines: 11

ObjectId
--------

To specify an ObjectId value, use ``$oid`` with the ID as a byte string:

.. literalinclude:: /data-api/snippets/data-types.snippet.ObjectId.sh
   :language: bash
   :emphasize-lines: 11

