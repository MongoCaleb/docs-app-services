.. _flexible-sync-permissions-guide:

===============================
Flexible Sync Permissions Guide
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page shows how to set up your flexible sync app's permissions for the
following common use cases:

- :ref:`read-write-own-data`
- :ref:`write-own-data-read-all-data`
- :ref:`admin-privileges`
- :ref:`restricted-news-feed`
- :ref:`dynamic-collaboration` - not currently possible.
- :ref:`tiered-privileges`

These assume you have already created a Realm app.

.. seealso::

   :ref:`create-realm-apps`
   :ref:`flexible-sync-rules-and-permissions`

.. _read-write-own-data:

Read & Write Own Data
---------------------

In this case, users may not read or write any data but their own. Consider a
notes app where the user wants their notes to be persisted and shared across
their own devices but kept private to their user account.

This strategy permits a user to create and edit a document if and only if that
document's ``owner_id`` field equals the user's ID.

To set this up, follow these steps:

.. include:: /includes/use-flex-sync-templates

- :guilabel:`Define Permissions`: use the template dropdown to
  select the template called "Users can only read and write their own data".

  This populates the rule expression box with something like the following:

  .. code-block:: json
     :emphasize-lines: 6-7
  
     {
       "defaultRoles": [
         {
           "name": "owner-read-write", 
           "applyWhen": {},
           "read": {"owner_id": "%%user.id"},
           "write": {"owner_id": "%%user.id"}
         }
       ]  
     }

  Note that the "read" and "write" expressions use the ``owner_id`` field we
  marked as "queryable" above. It also uses the ``%%user`` expansion to read the
  requesting user's id.

  When a client accesses the data through Sync, Realm evaluates these
  expressions to determine permissions. This expression says the requesting user
  may read or write if the document's ``owner_id`` field is equal to the user's
  ID.

- Skip :guilabel:`Advanced Configuration`, and then click :guilabel:`Save Changes` 
  to enable Sync with these permissions.


.. _write-own-data-read-all-data:

Write Own Data, Read All Data
-----------------------------

In this case, users can read all data, but write only their own data. Consider a 
recipe app where users can read all recipes and add new recipes. The recipes 
they add can be viewed by everyone using the app. 

To set this up, follow these steps:

.. include:: /includes/use-flex-sync-templates

- :guilabel:`Define Permissions`: use the template dropdown to
  select the template called "Users can read all data but only write their own data".

  This populates the rule expression box with the following:

  .. code-block:: json
     :emphasize-lines: 6-7
  
     {
        "defaultRoles": [
          {
            "name": "owner-write", 
            "applyWhen": {},
            "read": true,
            "write": {"owner_id": "%%user.id"}
          }    
        ]  
      }

  Note that the "read" expression is set to ``true``, indicating that 
  no matter which user is authenticated, they can access all of the data. 
  The "write" expression uses the ``owner_id`` field we marked as "queryable" 
  above and uses the ``%%user`` expansion to match against the requesting user's 
  id. 

  When a user accesses the data through Sync, Realm evaluates these
  expressions to determine permissions. This expression says the requesting user
  may read all data, but write only if the document's ``owner_id`` field is equal 
  to the user's ID.

- Skip :guilabel:`Advanced Configuration`, and then click :guilabel:`Save Changes` 
  to enable Sync with these permissions.

.. _admin-privileges:

Administrator Privileges
------------------------

In this permission strategy, users with a specific "administrator" role can 
read and write any document. Users who do not have the specified role can only 
read and write their own data. To make this strategy work, you first need to 
define which users have administrator permissions. You do this by enabling 
Custom User Data and defining the document that contains the user data.

In the custom user data document that you define, you create   
a field that is used to indicate whether the user has administrative 
privileges. While there are many ways to set this up, one approach is to add 
a boolean property called ``isAdmin``, which is set to ``true`` for those 
users with the elevated permissions. Another is to create a string field 
called ``role``, in which one of the expected values might be "admin". 

In the following example, the custom user object we have created has 3 fields: 
``firstName``, ``lastName``, and ``isGlobalAdmin``:

.. code-block:: json

   {
      "_id" : "1234",
      "firstName": "Lily",
      "lastName": "Realmster",
      "isGlobalAdmin": true
   }

Configure Custom User Data
~~~~~~~~~~~~~~~~~~~~~~~~~~

{+service+} stores MongoDB documents that correspond to custom user data
in a linked MongoDB Atlas cluster. When you configure custom user data for your 
application, you specify the cluster, database, collection, and finally a 
User ID field, which maps a custom user data document to an 
authenticated user's ID. To enable custom user data, follow these steps:

.. include:: /includes/define-custom-user-data.rst

Set Up Admin Privileges
~~~~~~~~~~~~~~~~~~~~~~~
After you have custom user data enabled, you can implement the Admin Privileges 
strategy. To do so, follow these steps:

.. include:: /includes/use-flex-sync-templates

- :guilabel:`Define Permissions`: use the template dropdown to
  select the template called "Users can read and write their own data, admins 
  can read and write all data".

  This populates the rule expression box with the following:

.. code-block:: json

   {
     "defaultRoles": [
       {
         "name": "admin", 
         "applyWhen": { "%%user.custom_data.isGlobalAdmin": true},
         "read": true,
         "write": true
       },
       {
         "name": "user", 
         "applyWhen": {},
         "read": {"owner_id": "%%user.id"},
         "write": {"owner_id": "%%user.id"}
       }
     ]  
   }

.. note:: Change the default settings

   The generated expression has two objects in the "defaultRoles" 
   array. The first defines the permissions for an administrator. Note that the 
   auto-generated expression assumes there is a boolean field in the custom user 
   data document named ``isGlobalAdmin``. Depending on how you defined your custom 
   user data document, you may need to change this. 
   
   The second section of the "defaultRoles" array defines the rules for all other 
   users. The default is to restrict user access to read and write only their own 
   data. You can change either or both of these fields to ``true``, enabling 
   users to read and/or write all data. See the previous sections to learn more 
   about these strategies.

- Skip :guilabel:`Advanced Configuration`, and then click :guilabel:`Save Changes` 
  to enable Sync with these permissions.


.. _restricted-news-feed:

Restricted News Feed
--------------------

TODO: list of subscribed to <16KB
TODO: must do client reset when that array changes
TODO: permissions to edit CUD -- do this as function. still need to create 2nd data source



In this permission strategy, users can create their own content and subscribe 
to other creators' content. As with the Admin Privileges scenario, we will 
make use of a Custom User Data collection to define which authors' content 
a user is subscribed to read.

Flexible {+sync-short+} supports querying arrays, so we will create an array 
within a user data object. This array contains IDs of the authors that this user 
is authorized to "follow". We then set up a subscription that says, in essence, 
"Give me all documents where I am the author, or the author's ID is in the array  
of authors in my custom user data."
 
Configure Custom User Data
~~~~~~~~~~~~~~~~~~~~~~~~~~

To enable custom user data, follow these steps:

.. include:: /includes/define-custom-user-data.rst

Set Up Restricted Permissions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the custom user data object, create an array that holds the _id values of 
each author the user is following. In this example, we'll call it "subscriptions". 
Our user data object looks like the following, where Lily Realmster 
(``"_id": "1234"``) is subscribed to all documents written by users "456" 
and "789":

.. code-block:: json

   {
      "_id" : "1234",
      "firstName": "Lily",
      "lastName": "Realmster",
      "subscriptions": [
        "456",
        "789"
      ]
   }

You can now implement the Restricted Privileges strategy. To do so, follow these 
steps:

.. include:: /includes/use-flex-sync-templates

- :guilabel:`Define Permissions`: use the template dropdown to
  select the template called "Users can only read and write their own data". 
  This populates the rule expression box with the following, which is not 
  *exactly what we want*, but provides most of the logic for us:

  .. code-block:: json

    {
      "defaultRoles": [
        {
          "name": "owner-read-write", 
          "applyWhen": {},
          "read": {"owner_id": "%%user.id"},
          "write": {"owner_id": "%%user.id"}
        }
      ]  
    }

  Note that a user can currently read only their own documents 
  (``"read": {"owner_id": "%%user.id"}``). We need to add an ``$or`` statement to 
  include all documents written by a subscribed author. Those authors' IDs are 
  stored in an array, so we also use the ``$in`` operator. The expression looks 
  like this:

  .. code-block:: json

    {
      "defaultRoles": [
        {
          "name": "owner-write", 
          "applyWhen": {},
          "read": {"$or" : [
              {"owner_id": "%%user.id"},
              {"owner_id": {"$in": [
                "%%user.custom_data.subscriptions"
              ]}}
            ]},
          "write": {"owner_id": "%%user.id"}
        }    
      ]
    }

- Update the rule expression box with this new logic and save the changes.



.. _dynamic-collaboration:

Dynamic Collaboration
---------------------

In the Dynamic Collaboration strategy, users can create documents and add other
users as editors of that document.

Like the Read & Write Own Data strategy, this strategy permits a user to create
and edit a document if that document's ``owner_id`` field equals the user's ID.
Additionally, a user may edit the document if the document's ``collaborators``
array field contains their ID.

To implement this strategy, follow these steps:

.. include:: /includes/use-flex-sync-templates

- Also in :guilabel:`Select Queryable Fields`: type in ``collaborators`` as well. This
  will be the field that stores the IDs of users who can also read and write
  the document.
- :guilabel:`Define Permissions`: use the template dropdown to
  select the "Custom (start from scratch)". Paste the following into the rule
  expression box: 

  .. code-block:: json

     {
       "rules": {},
       "defaultRoles": [
         {
           "name": "read-only",
           "applyWhen": {},
           "write": {
             "$or": [
               {
                 "owner_id": "%%user.id"
               },
               {
                 "collaborators": "%%user.id"
               }
             ]
           }
         }
       ]
     }
  
  Take a look at the "write" expression. ``$or`` takes an array of options. We
  have two possible conditions where a user may write the document:
  
  - The ``owner_id`` field of the document equals the user's ID
  - The ``collaborators`` array field of the document contains the user's ID.

  If granted write permission, the user automatically gets read permission.
  Therefore, we omitted the "read" expression as it would be redundant in this
  case.

A user can add a collaborator to their document by adding the collaborator's
user ID to the ``collaborators`` array field on their document. This can be done
on the client side.

How exactly you get the potential collaborator's user ID depends on the details
of your app and your UI. There is no built-in functionality for searching for
users -- you need to set this up according to your app's needs. For example,
your app might use email/password authentication. When a user wants to add a
collaborator to a document, you might have a search box that accepts an email
address. Upon entering an email address, the client calls a Realm backend
function that queries your user data collection. You had set up an
authentication trigger to fire upon user registration. The trigger function
stores each new user's email address and ID in the user data collection. So, if
the email address was found by the search function, the user ID can be returned
to the client. The client can then add the collaborator user ID to the
document's collaborators list.

Caveats
~~~~~~~

If a user has write access to a document, they may write to any field of the
document. Consequently, this strategy **allows collaborators to add
collaborators**. It would also allow a collaborator to edit the ``owner_id``
field. We don't recommend using this model for highly sensitive data.

.. _tiered-privileges:

Tiered Privileges
-----------------

In this permission strategy, users with the ``globalAdmin`` session role
can read and write to any document. Users with the ``departmentAdmin``
session role can read any document, but can only write to documents in
their department. Users with the ``departmentMember`` session role can
read any document in their department, but can't write to any documents.
Members can only read documents in their own departments; they cannot
read documents for other departments.

.. code-block:: json

   {
    "Employees": [{
        "name": "globalAdmin",
        "applyWhen": {
          "%%user.custom_data.isGlobalAdmin": true
        },
        "read": {},
        "write": {}
      },
      {
        "name": "departmentAdmin",
        "applyWhen": {
          "%%user.custom_data.isLocalAdmin": true
        },
        "read": {},
        "write": {
          "department": "%%user.custom_data.department"
        }
      },
      {
        "name": "departmentMember",
        "applyWhen": {},
        "read": {
          "department": "%%user.custom_data.department"
        },
        "write": false
      }
    ]
   }



.. seealso:: Enable Custom User Data

   :ref:`<custom-user-data>`